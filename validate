#!/usr/bin/env python3
# Copyright (C) 2023 Reece H. Dunn. SPDX-License-Identifier: Apache-2.0

import argparse
import sys
import os

from validator import conllutil
from validator.logger import error_count

from validator.contractions import ContractionValidator
from validator.lemma import TokenLemmaValidator
from validator.form import TokenFormValidator
from validator.mwt import MwtTokenValidator, MwtWordValidator
from validator.pos import PosTagValidator
from validator.sentence import SentenceTextValidator, SplitSentenceValidator
from validator.tokenization import AbbreviationValidator


def validate_conllu(filename, default_language, validator):
    for sent in conllutil.parse_conllu(filename):
        if 'newdoc' in sent.metadata or 'newdoc id' in sent.metadata:
            language = sent.metadata.get('dc:language', default_language).split('-')[0]
            validator.switch_language(language)
        validator.validate_sentence(sent)


def validate_files(filename, default_language, validator):
    if filename.endswith('.lst'):
        dirname = os.path.dirname(filename)
        for file in conllutil.parse_filelist(filename):
            conllu_filename = os.path.join(dirname, file)
            validate_conllu(conllu_filename, default_language, validator)
    else:
        validate_conllu(filename, default_language, validator)


validators = {
    'abbreviations': AbbreviationValidator,
    'contractions': ContractionValidator,
    'form': TokenFormValidator,
    'lemma': TokenLemmaValidator,
    'mwt-tokens': MwtTokenValidator,
    'mwt-words': MwtWordValidator,
    'pos-tags': PosTagValidator,
    'sentence-text': SentenceTextValidator,
    'split-sentences': SplitSentenceValidator,
}


def build_argparse():
    parser = argparse.ArgumentParser()
    parser.add_argument('input',
                        help='The CoNLL-U file to validate.')

    parser.add_argument('--language', default='und', type=str,
                        help='The language to use for the document if none is specified in the metadata.')
    parser.add_argument('--validator', default='sentence-text', type=str,
                        help='The validation tests to run.')

    return parser


def main():
    args = build_argparse().parse_args()
    validate_files(args.input,
                   default_language=args.language,
                   validator=validators[args.validator](args.language))
    if error_count > 0:
        sys.exit(1)


if __name__ == '__main__':
    main()
